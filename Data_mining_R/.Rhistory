summary(data)
# Afficher les noms des variables pour avoir un aperçu rapide de la base de données
names(data)
# Identifier le type de chaque variable (numérique, caractère, etc.)
# On peut également créer un tableau pour une vue plus claire
variable_types <- sapply(data, class)
print(variable_types)
# Visualisation rapide pour voir la distribution des variables numériques
# Utilisation de ggplot2 pour créer des histogrammes pour chaque variable numérique
numeric_vars <- select_if(data, is.numeric)  # Sélectionner uniquement les variables numériques
# Créer une liste de graphiques pour chaque variable numérique
histograms <- lapply(names(numeric_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
ggtitle(paste("Histogram of", var)) +
theme_minimal()
})
# Vérifier si la liste des histogrammes est vide avant d'afficher
if (length(histograms) > 0) {
# Afficher les histogrammes en utilisant cowplot
plot_grid(plotlist = histograms, ncol = 3)  # Afficher les graphiques dans une grille de 3 colonnes
} else {
print("Aucun histogramme à afficher.")
}
# Visualisation des variables catégorielles
# Créer des barplots pour les variables catégorielles
categorical_vars <- select_if(data, is.factor)  # Sélectionner uniquement les variables catégorielles
# Créer une liste de barplots pour chaque variable catégorielle
barplots <- lapply(names(categorical_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_bar(fill = "skyblue", color = "black") +
ggtitle(paste("Barplot of", var)) +
theme_minimal()
})
# Vérifier si la liste des barplots est vide avant d'afficher
if (length(barplots) > 0) {
# Afficher les barplots en utilisant cowplot
plot_grid(plotlist = barplots, ncol = 3)  # Afficher les graphiques dans une grille de 3 colonnes
} else {
print("Aucun barplot à afficher.")
}
# -----------------------------------------------------------
# Partie II : Présentation de la Problématique
# -----------------------------------------------------------
# (À compléter en fonction de votre problématique spécifique)
# -----------------------------------------------------------
# Partie III : Analyse Descriptive
# -----------------------------------------------------------
# (À compléter avec l'analyse descriptive des données)
# -----------------------------------------------------------
# Partie IV : Implémenter une Analyse Factorielle
# -----------------------------------------------------------
# (À compléter avec l'implémentation de l'ACP ou ACM)
# -----------------------------------------------------------
# Partie V : Mise en œuvre d'un Algorithme d'Apprentissage
# -----------------------------------------------------------
# (À compléter avec la mise en œuvre de l'algorithme d'apprentissage supervisé ou non-supervisé)
# Installer le package cowplot s'il n'est pas encore installé
# install.packages("cowplot")
library(cowplot)
library(tidyverse)  # Pour la manipulation de données et la visualisation
library(ggplot2)    # Pour les visualisations
# -----------------------------------------------------------
# Partie I : Présentation de la Base de Données, de sa Structure et de ses Variables
# -----------------------------------------------------------
# Charger les données
# Remplacez 'path_to_your_data_file' par le chemin réel de votre fichier CSV
data <- read.csv("data/Customer-Churn-Records.csv")
# Afficher les premières lignes de la base de données pour un aperçu rapide
head(data)
# Afficher la structure de la base de données pour connaître le type de chaque variable
str(data)
# Résumé statistique des variables pour obtenir des informations descriptives
summary(data)
# Afficher les noms des variables pour avoir un aperçu rapide de la base de données
names(data)
# Identifier le type de chaque variable (numérique, caractère, etc.)
# On peut également créer un tableau pour une vue plus claire
variable_types <- sapply(data, class)
print(variable_types)
# Visualisation rapide pour voir la distribution des variables numériques
# Utilisation de ggplot2 pour créer des histogrammes pour chaque variable numérique
numeric_vars <- select_if(data, is.numeric)  # Sélectionner uniquement les variables numériques
# Créer une liste de graphiques pour chaque variable numérique
histograms <- lapply(names(numeric_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
ggtitle(paste("Histogram of", var)) +
theme_minimal()
})
# Vérifier si la liste des histogrammes est vide avant d'afficher
if (length(histograms) > 0) {
# Afficher les histogrammes en utilisant cowplot
plot_grid(plotlist = histograms, ncol = 3)  # Afficher les graphiques dans une grille de 3 colonnes
} else {
print("Aucun histogramme à afficher.")
}
# Visualisation des variables catégorielles
# Créer des barplots pour les variables catégorielles
categorical_vars <- select_if(data, is.factor)  # Sélectionner uniquement les variables catégorielles
# Créer une liste de barplots pour chaque variable catégorielle
barplots <- lapply(names(categorical_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_bar(fill = "skyblue", color = "black") +
ggtitle(paste("Barplot of", var)) +
theme_minimal()
})
# Vérifier si la liste des barplots est vide avant d'afficher
if (length(barplots) > 0) {
# Afficher les barplots en utilisant cowplot
plot_grid(plotlist = barplots, ncol = 3)  # Afficher les graphiques dans une grille de 3 colonnes
} else {
print("Aucun barplot à afficher.")
}
# -----------------------------------------------------------
# Partie II : Présentation de la Problématique
# -----------------------------------------------------------
# (À compléter en fonction de votre problématique spécifique)
# -----------------------------------------------------------
# Partie III : Analyse Descriptive
# -----------------------------------------------------------
# (À compléter avec l'analyse descriptive des données)
# -----------------------------------------------------------
# Partie IV : Implémenter une Analyse Factorielle
# -----------------------------------------------------------
# (À compléter avec l'implémentation de l'ACP ou ACM)
# -----------------------------------------------------------
# Partie V : Mise en œuvre d'un Algorithme d'Apprentissage
# -----------------------------------------------------------
# (À compléter avec la mise en œuvre de l'algorithme d'apprentissage supervisé ou non-supervisé)
# Charger les packages nécessaires
library(FactoMineR)
library(factoextra)
# Identifier les variables numériques
numeric_vars <- data[, sapply(data, is.numeric)]
# Exécuter l'ACP sur les variables numériques uniquement
res.pca <- PCA(numeric_vars, scale.unit = TRUE, ncp = 5, graph = TRUE)
# Visualiser les résultats
fviz_eig(res.pca)
fviz_pca_ind(res.pca)
fviz_pca_var(res.pca)
# Identifier les indices des variables qualitatives dans le jeu de données original
qualitative_vars <- c(5, 6, 16)  # Indices des colonnes
# Exécuter l'ACP avec les variables supplémentaires
res.pca <- PCA(numeric_vars, scale.unit = TRUE, ncp = 5,
quali.sup = qualitative_vars, graph = TRUE)
tinytex::install_tinytex()
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
plot(cars)
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
library(cowplot)
library(tidyverse)  # Pour la manipulation de données et la visualisation
library(ggplot2)    # Pour les visualisations
library(cowplot)
library(tidyverse)  # Pour la manipulation de données et la visualisation
library(ggplot2)    # Pour les visualisations
library(cowplot)
library(tidyverse)  # Pour la manipulation de données et la visualisation
library(ggplot2)    # Pour les visualisations
library(cowplot)
library(tidyverse)  # Pour la manipulation de données et la visualisation
library(ggplot2)    # Pour les visualisations
library(cowplot)
library(tidyverse)  # Pour la manipulation de données et la visualisation
library(ggplot2)    # Pour les visualisations
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
View(data)
View(data)
source("~/Documents/UNIV/UVBF L3 2024/UVBF_L3_ANALYSE_DE_DONNEES/Data_mining_R/kkk.Rmd")
library(cowplot)
library(tidyverse)
library(ggplot2)
data <- read.csv("data/Customer-Churn-Records.csv")
library(cowplot)
library(tidyverse)
library(ggplot2)
View(data)
data <- read.csv("data/Customer-Churn-Records.csv")
# Charger les librairies nécessaires
library(tidyverse)  # Pour la manipulation de données et la visualisation
library(skimr)     # Pour obtenir un résumé rapide des données
install.packages("skimr")
# Charger les librairies nécessaires
library(tidyverse)  # Pour la manipulation de données et la visualisation
library(skimr)     # Pour obtenir un résumé rapide des données
# Charger les données
data <- read.csv("Customer-Churn-Records.csv")
# Obtenir un résumé rapide des données
skim(data)
categorical_vars <- select_if(data, is.factor)  # Sélectionner uniquement les variables catégorielles
# Créer une liste de barplots pour chaque variable catégorielle
barplots <- lapply(names(categorical_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_bar(fill = "skyblue", color = "black") +
ggtitle(paste("Barplot of", var)) +
theme_minimal()
})
library(cowplot)
library(tidyverse)  # Pour la manipulation de données et la visualisation
library(ggplot2)
# Charger les données
# Remplacez 'path_to_your_data_file' par le chemin réel de votre fichier CSV
data <- read.csv("data/Customer-Churn-Records.csv")
# Afficher les premières lignes de la base de données pour un aperçu rapide
head(data)
# Afficher la structure de la base de données pour connaître le type de chaque variable
str(data)
# Résumé statistique des variables pour obtenir des informations descriptives
summary(data)
# Afficher les noms des variables pour avoir un aperçu rapide de la base de données
names(data)
# Identifier le type de chaque variable (numérique, caractère, etc.)
# On peut également créer un tableau pour une vue plus claire
variable_types <- sapply(data, class)
print(variable_types)
# Visualisation rapide pour voir la distribution des variables numériques
# Utilisation de ggplot2 pour créer des histogrammes pour chaque variable numérique
numeric_vars <- select_if(data, is.numeric)  # Sélectionner uniquement les variables numériques
# Créer une liste de graphiques pour chaque variable numérique
histograms <- lapply(names(numeric_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
ggtitle(paste("Histogram of", var)) +
theme_minimal()
})
# Vérifier si la liste des histogrammes est vide avant d'afficher
if (length(histograms) > 0) {
# Afficher les histogrammes en utilisant cowplot
plot_grid(plotlist = histograms, ncol = 3)  # Afficher les graphiques dans une grille de 3 colonnes
} else {
print("Aucun histogramme à afficher.")
}
# Visualisation des variables catégorielles
# Créer des barplots pour les variables catégorielles
categorical_vars <- select_if(data, is.factor)  # Sélectionner uniquement les variables catégorielles
# Créer une liste de barplots pour chaque variable catégorielle
barplots <- lapply(names(categorical_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_bar(fill = "skyblue", color = "black") +
ggtitle(paste("Barplot of", var)) +
theme_minimal()
})
# Vérifier si la liste des barplots est vide avant d'afficher
if (length(barplots) > 0) {
# Afficher les barplots en utilisant cowplot
plot_grid(plotlist = barplots, ncol = 3)  # Afficher les graphiques dans une grille de 3 colonnes
} else {
print("Aucun barplot à afficher.")
}
# Visualisation des variables catégorielles
# Créer des barplots pour les variables catégorielles
categorical_vars <- select_if(data, is.chr)  # Sélectionner uniquement les variables catégorielles
# Visualisation des variables catégorielles
# Créer des barplots pour les variables catégorielles
categorical_vars <- select_if(data, is.character)  # Sélectionner uniquement les variables catégorielles
# Créer une liste de barplots pour chaque variable catégorielle
barplots <- lapply(names(categorical_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_bar(fill = "skyblue", color = "black") +
ggtitle(paste("Barplot of", var)) +
theme_minimal()
})
# Vérifier si la liste des barplots est vide avant d'afficher
if (length(barplots) > 0) {
# Afficher les barplots en utilisant cowplot
plot_grid(plotlist = barplots, ncol = 3)  # Afficher les graphiques dans une grille de 3 colonnes
} else {
print("Aucun barplot à afficher.")
}
# Visualiser la distribution de variables catégorielles
ggplot(data, aes(x = Geography)) + geom_bar()
``` { collapse=TRUE}
# Charger les données
data <- read.csv("data/Customer-Churn-Records.csv")
# Afficher les premières lignes de la base de données pour un aperçu rapide
head(data)
# Afficher la structure de la base de données pour connaître le type de chaque variable
str(data)
# Résumé statistique des variables pour obtenir des informations descriptives
summary(data)
# Afficher les noms des variables pour avoir un aperçu rapide de la base de données
names(data)
``` {r, collapse=TRUE}
# Charger les données
data <- read.csv("data/Customer-Churn-Records.csv")
# Afficher les premières lignes de la base de données pour un aperçu rapide
head(data)
# Afficher la structure de la base de données pour connaître le type de chaque variable
str(data)
# Résumé statistique des variables pour obtenir des informations descriptives
summary(data)
# Afficher les noms des variables pour avoir un aperçu rapide de la base de données
names(data)
# Identifier le type de chaque variable (numérique, caractère, etc.)
# On peut également créer un tableau pour une vue plus claire
variable_types <- sapply(data, class)
print(variable_types)
# Visualisation rapide pour voir la distribution des variables numériques
# Utilisation de ggplot2 pour créer des histogrammes pour chaque variable numérique
numeric_vars <- select_if(data, is.numeric)  # Sélectionner uniquement les variables numériques
# Créer une liste de graphiques pour chaque variable numérique
histograms <- lapply(names(numeric_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black") +
ggtitle(paste("Histogram of", var)) +
theme_minimal()
})
# Vérifier si la liste des histogrammes est vide avant d'afficher
if (length(histograms) > 0) {
# Afficher les histogrammes en utilisant cowplot
plot_grid(plotlist = histograms, ncol = 3)  # Afficher les graphiques dans une grille de 3 colonnes
} else {
print("Aucun histogramme à afficher.")
}
# Visualisation des variables catégorielles
# Créer des barplots pour les variables catégorielles
categorical_vars <- select_if(data, is.character)  # Sélectionner uniquement les variables catégorielles
# Créer une liste de barplots pour chaque variable catégorielle
barplots <- lapply(names(categorical_vars), function(var) {
ggplot(data, aes_string(x = var)) +
geom_bar(fill = "skyblue", color = "black") +
ggtitle(paste("Barplot of", var)) +
theme_minimal()
})
# Vérifier si la liste des barplots est vide avant d'afficher
if (length(barplots) > 0) {
# Afficher les barplots en utilisant cowplot
plot_grid(plotlist = barplots, ncol = 3)  # Afficher les graphiques dans une grille de 3 colonnes
} else {
print("Aucun barplot à afficher.")
}
ggplot(data = df, aes(x = factor(Exited),
y = prop.table(stat(count)), fill = factor(Exited),
label = scales::percent_format(accuracy=0.01)(prop.table(stat(count))))) +
geom_bar(position = "dodge") +
geom_text(stat = 'count',
position = position_dodge(0.9),
vjust = -0.5,
size = 3.5) + coord_flip()+
scale_y_continuous(labels = scales::percent_format(accuracy=0.01))+labs(
x ='Abandon',y ="Pourcentage d' Abandon")+ggtitle('TAUX DE CHUTE')
# Charger les packages nécessaires
library(FactoMineR)
library(factoextra)
# Identifier les variables numériques
numeric_vars <- data[, sapply(data, is.numeric)]
# Exécuter l'ACP sur les variables numériques uniquement
res.pca <- PCA(numeric_vars, scale.unit = TRUE, ncp = 5, graph = TRUE)
# Visualiser les résultats
fviz_eig(res.pca)
fviz_pca_ind(res.pca)
fviz_pca_var(res.pca)
# Identifier les indices des variables qualitatives dans le jeu de données original
qualitative_vars <- c(5, 6, 16)  # Indices des colonnes
# Exécuter l'ACP avec les variables supplémentaires
res.pca <- PCA(numeric_vars, scale.unit = TRUE, ncp = 5,
quali.sup = qualitative_vars, graph = TRUE)
# Charger les packages nécessaires
library(FactoMineR)
library(factoextra)
# Identifier les variables numériques
numeric_vars <- data[, sapply(data, is.numeric)]
# Exécuter l'ACP sur les variables numériques uniquement
res.pca <- PCA(numeric_vars, scale.unit = TRUE, ncp = 5, graph = TRUE)
# Visualiser les résultats
fviz_eig(res.pca)
fviz_pca_ind(res.pca)
fviz_pca_var(res.pca)
# Identifier les indices des variables qualitatives dans le jeu de données original
qualitative_vars <- c(5, 6, 16)  # Indices des colonnes
# Exécuter l'ACP avec les variables supplémentaires
res.pca <- PCA(numeric_vars, scale.unit = TRUE, ncp = 5,
quali.sup = qualitative_vars, graph = TRUE)
head(df)
# install.packages("httr")
#
# install.packages("cowplot")
#
# install.packages("dplyr")
#
# install.packages("ggpubr")
# chargement du package  plyr pour la manipulation des données et opérations sur des data frames.
library(plyr)
# chargement du package corrplot : Visualisation des corrélations entre variables
library(corrplot)
# chargement du package ggplot2 : Création de graphiques et visualisations de données.
library(ggplot2)
# chargement du package gridExtra : Organisation et mise en page de plusieurs graphiques.
library(gridExtra)
# chargement du package ggthemes : Thèmes et palettes pour ggplot2.
library(ggthemes)
# chargement du package caret : Entraînement et évaluation de modèles de machine learning.
library(caret)
# chargement du package party : Création d'arbres de décision et de forêts aléatoires.
library(party)
# Charger le package httr qui fournit une interface pour interagir avec les services web via HTTP en R.
library(httr)
library(cowplot)
library(dplyr)
library(ggpubr)
library(FactoMineR)
library(factoextra)
data <- read.csv("data/Customer-Churn-Records.csv")
df <- data
head(df)
# Afficher les premières lignes sous forme de tableau bien formaté
library(knitr)
kable(head(df), caption = "Premières lignes du jeu de données")
# Charger les bibliothèques nécessaires
library(ggplot2)
# Créer un dataframe avec des données simulées
data <- data.frame(
CoûtAcquisition = c(50, 70, 100),
TauxDésabonnement = c(20, 15, 10)
)
# Créer un graphique à dispersion
ggplot(data, aes(x = CoûtAcquisition, y = TauxDésabonnement)) +
geom_point(color = "blue", size = 3) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Corrélation entre Coût d'Acquisition et Taux de Désabonnement",
x = "Coût d'Acquisition",
y = "Taux de Désabonnement (%)") +
theme_minimal()
# Charger la bibliothèque nécessaire
library(ggplot2)
# Créer un dataframe avec des données simulées
data <- data.frame(
CoûtEntreprise = c(5000, 7000, 9000, 11000),
TauxDesabonnement = c(5, 8, 12, 15)
)
# Créer un graphique à dispersion
ggplot(data, aes(x = CoûtEntreprise, y = TauxDesabonnement)) +
geom_point(color = "blue", size = 3) +  # Points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Ligne de tendance
labs(title = "Corrélation entre Coût pour l'Entreprise et Taux de Désabonnement",
x = "Coût pour l'Entreprise",
y = "Taux de Désabonnement (%)") +
theme_minimal()
# Charger la bibliothèque nécessaire
library(ggplot2)
# Créer un dataframe avec des données simulées
data <- data.frame(
CoûtEntreprise = c(5000, 7000, 9000, 11000),
TauxDesabonnement = c(5, 8, 12, 15)
)
# Créer un graphique à dispersion
plot <- ggplot(data, aes(x = CoûtEntreprise, y = TauxDesabonnement)) +
geom_point(color = "blue", size = 3) +  # Points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Ligne de tendance
labs(title = "Corrélation entre Coût pour l'Entreprise et Taux de Désabonnement",
x = "Coût pour l'Entreprise",
y = "Taux de Désabonnement (%)") +
theme_minimal()
# Sauvegarder le graphique
ggsave(filename = "correlation_coût_désabonnement.png", plot = plot, width = 8, height = 6)
# Charger la bibliothèque nécessaire
library(ggplot2)
# Créer un dataframe avec des données simulées
data <- data.frame(
CoûtEntreprise = c(5000, 7000, 9000, 11000),
TauxDesabonnement = c(5, 8, 12, 15)
)
# Créer un graphique à dispersion
plot <- ggplot(data, aes(x = CoûtEntreprise, y = TauxDesabonnement)) +
geom_point(color = "blue", size = 3) +  # Points
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Ligne de tendance
labs(title = "Corrélation entre Coût pour l'Entreprise et Taux de Désabonnement",
x = "Coût pour l'Entreprise",
y = "Taux de Désabonnement (%)") +
theme_minimal()
# Sauvegarder le graphique
ggsave(filename = "correlation_coût_désabonnement.jpeg", plot = plot, width = 8, height = 6)
str(df)
data_numeric <- df %>%
select_if(is.numeric)
data_numeric
data_numeric <- df %>%
select_if(-is.numeric)
data_numeric <- df %>%
-select_if(is.numeric)
data_numeric <- df %>%
select_if(-(is.numeric))
data_numeric <- df %>%
select_if(-(is.numeric))
data_numeric <- df %>%
select_if(is.numeric)
data_numeric <- df %>%
select_if(is.numeric)
data_numeric
